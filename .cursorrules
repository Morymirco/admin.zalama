# R√®gles Cursor pour ZaLaMa Admin Dashboard

## Architecture Email et SMS

### üö´ NE JAMAIS FAIRE (C√¥t√© Client)
- N'appelle JAMAIS directement les APIs externes (Resend, Nimba SMS) depuis le navigateur
- N'importe JAMAIS `emailService` ou `smsService` dans des composants React
- N'utilise JAMAIS les cl√©s API sensibles c√¥t√© client
- N'appelle JAMAIS directement `advanceNotificationService` depuis le navigateur

### ‚úÖ TOUJOURS FAIRE (Architecture Correcte)

#### 1. Pour les Emails
```typescript
// ‚ùå MAUVAIS - Ne pas faire
import emailService from '@/services/emailService';
await emailService.sendEmail({...});

// ‚úÖ BON - Utiliser l'API route
const response = await fetch('/api/email/send', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    to: ['email@example.com'],
    subject: 'Sujet',
    html: '<p>Contenu</p>'
  })
});
```

#### 2. Pour les SMS
```typescript
// ‚ùå MAUVAIS - Ne pas faire
import smsService from '@/services/smsService';
await smsService.sendSMS({...});

// ‚úÖ BON - Utiliser l'API route
const response = await fetch('/api/sms/send', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    to: ['+224XXXXXXXXX'],
    message: 'Message SMS',
    sender_name: 'ZaLaMa'
  })
});
```

#### 3. Pour les Notifications d'Avance
```typescript
// ‚ùå MAUVAIS - Ne pas faire
import advanceNotificationService from '@/services/advanceNotificationService';
await advanceNotificationService.sendApprovalNotification(requestId);

// ‚úÖ BON - Utiliser l'API route
const response = await fetch('/api/advance/notifications', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    type: 'approval',
    requestId: requestId
  })
});
```

### üìÅ Structure des Services

#### Services C√¥t√© Client (Navigateur)
- `services/emailService.ts` - Appelle `/api/email/send`
- `services/smsService.ts` - Appelle `/api/sms/send`
- `services/advanceNotificationService.ts` - Appelle `/api/advance/notifications`

#### Services C√¥t√© Serveur (API Routes)
- `services/serverEmailService.ts` - Appelle directement Resend
- `services/serverSmsService.ts` - Appelle directement Nimba SMS
- `services/advanceNotificationService.ts` - Utilise les services serveur

### üîß API Routes Requises

#### Email
```typescript
// app/api/email/send/route.ts
import serverEmailService from '@/services/serverEmailService';

export async function POST(request: NextRequest) {
  const body = await request.json();
  const result = await serverEmailService.sendEmail(body);
  return NextResponse.json(result);
}
```

#### SMS
```typescript
// app/api/sms/send/route.ts
import serverSmsService from '@/services/serverSmsService';

export async function POST(request: NextRequest) {
  const body = await request.json();
  const result = await serverSmsService.sendSMS(body);
  return NextResponse.json(result);
}
```

#### Notifications d'Avance
```typescript
// app/api/advance/notifications/route.ts
import advanceNotificationService from '@/services/advanceNotificationService';

export async function POST(request: NextRequest) {
  const body = await request.json();
  const result = await advanceNotificationService.sendApprovalNotification(body.requestId);
  return NextResponse.json(result);
}
```

### üéØ R√®gles de D√©veloppement

1. **Toujours passer par une API route** pour les emails/SMS
2. **Utiliser les services c√¥t√© serveur** dans les API routes
3. **Ne jamais exposer les cl√©s API** c√¥t√© client
4. **G√©rer les erreurs gracieusement** - ne pas faire √©chouer l'application si SMS/email √©choue
5. **Logger les tentatives** d'envoi pour le debugging

### üîç V√©rification

Avant de commiter, v√©rifier :
- [ ] Aucun appel direct aux APIs externes c√¥t√© client
- [ ] Toutes les cl√©s API sont dans les variables d'environnement
- [ ] Les services c√¥t√© serveur utilisent les clients officiels
- [ ] Les erreurs sont g√©r√©es sans faire √©chouer l'application

### üìù Exemples d'Usage

#### Composant React
```typescript
const handleSendNotification = async () => {
  try {
    const response = await fetch('/api/advance/notifications', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        type: 'approval',
        requestId: 'request-id'
      })
    });
    
    if (response.ok) {
      toast.success('Notification envoy√©e');
    } else {
      toast.error('Erreur lors de l\'envoi');
    }
  } catch (error) {
    console.error('Erreur:', error);
    toast.error('Erreur r√©seau');
  }
};
```

#### Hook Personnalis√©
```typescript
const useNotifications = () => {
  const sendEmail = async (data: EmailData) => {
    const response = await fetch('/api/email/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    return response.json();
  };

  const sendSMS = async (data: SMSData) => {
    const response = await fetch('/api/sms/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    return response.json();
  };

  return { sendEmail, sendSMS };
};
```

### üö® Erreurs Communes √† √âviter

1. **CORS Error** : Appel direct √† Resend/Nimba SMS depuis le navigateur
2. **404 Error** : URL d'API incorrecte ou service non configur√©
3. **Auth Error** : Cl√©s API manquantes ou incorrectes
4. **Network Error** : Probl√®me de connexion r√©seau

### üí° Bonnes Pratiques

- Toujours tester les notifications dans un environnement de d√©veloppement
- Utiliser des num√©ros de t√©l√©phone de test pour les SMS
- Logger les succ√®s et √©checs pour le monitoring
- G√©rer les timeouts et retry en cas d'√©chec
- Valider les donn√©es avant envoi (email valide, num√©ro de t√©l√©phone correct)

### üîÑ Gestion des Statuts de Paiement

#### Prioriser lengo_status comme source de v√©rit√©
```typescript
// ‚úÖ BON - Utiliser lengo_status
if (statusResult.lengo_status === 'SUCCESS') {
  // Paiement r√©ussi
} else if (statusResult.lengo_status === 'PENDING') {
  // Paiement en cours
} else if (statusResult.lengo_status === 'FAILED') {
  // Paiement √©chou√©
}

// ‚ùå MAUVAIS - Utiliser db_status
if (statusResult.db_status === 'EFFECTUEE') {
  // Peut √™tre d√©synchronis√©
}
```

#### Mapping des statuts LengoPay
- `SUCCESS` ‚Üí `EFFECTUEE` (DB)
- `FAILED` / `CANCELLED` ‚Üí `ANNULEE` (DB)
- `PENDING` / `INITIATED` ‚Üí `ANNULEE` (DB) - Ne pas forcer la mise √† jour 