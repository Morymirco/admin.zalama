  import { lengoPayCashin, LengoPayCashinParams } from '@/services/lengoPayService';
import { createClient } from '@supabase/supabase-js';
import { NextRequest, NextResponse } from 'next/server';

// Configuration Supabase - Utiliser les m√™mes cl√©s que les autres services qui fonctionnent
const supabaseUrl = 'https://mspmrzlqhwpdkkburjiw.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1zcG1yemxxaHdwZGtrYnVyaml3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3ODcyNTgsImV4cCI6MjA2NjM2MzI1OH0.zr-TRpKjGJjW0nRtsyPcCLy4Us-c5tOGX71k5_3JJd0';

// Utiliser la cl√© anonyme pour √©viter les probl√®mes de permissions
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Configuration directe avec les valeurs fournies
const LENGO_SITE_ID = process.env.LENGO_SITE_ID || 'ozazlahgzpntmYAG';
const LENGO_CALLBACK_URL = process.env.LENGO_CALLBACK_URL || 'https://admin.zalamasas.com/api/payments/lengo-callback';

// Fonction pour normaliser le num√©ro de t√©l√©phone selon la doc LengoPay
function normalizePhone(phone: string): string {
  // Garde uniquement les chiffres
  let p = phone.replace(/[^0-9]/g, '');
  
  // Si le num√©ro commence par 224 et fait 12 chiffres, on enl√®ve le pr√©fixe
  if (p.startsWith('224') && p.length === 12) {
    p = p.slice(3);
  }
  
  // On ne garde que les 9 derniers chiffres si jamais il y a un pr√©fixe
  if (p.length > 9) {
    p = p.slice(-9);
  }
  
  return p;
}

// Fonction pour mapper le type_account LengoPay vers l'enum methode_paiement
function mapTypeAccountToMethodePaiement(typeAccount: string): string {
  if (!typeAccount) return 'MOBILE_MONEY';
  const type = typeAccount.trim().toLowerCase();
  
  // Mapping des types de compte LengoPay vers nos m√©thodes de paiement
  if (type.includes('om') || type.includes('orange')) return 'MOBILE_MONEY';
  if (type.includes('mtn') || type.includes('mobile')) return 'MOBILE_MONEY';
  if (type.includes('virement') || type.includes('bank')) return 'VIREMENT_BANCAIRE';
  if (type.includes('cheque')) return 'CHEQUE';
  if (type.includes('cash') || type.includes('especes')) return 'ESPECES';
  
  // Par d√©faut, consid√©rer comme mobile money
  return 'MOBILE_MONEY';
}

// Fonction pour mapper le statut LengoPay vers l'enum transaction_statut
function mapLengoStatusToTransactionStatut(lengoStatus: string): string {
  if (!lengoStatus) return 'ANNULEE';
  const status = lengoStatus.trim().toUpperCase();
  
  // Si le statut est SUCCESS, la transaction est EFFECTUEE
  if (status === 'SUCCESS') return 'EFFECTUEE';
  
  // Pour tous les autres statuts (PENDING, FAILED, etc.), on consid√®re comme ANNULEE
  // La transaction sera mise √† jour plus tard quand le statut changera
  return 'ANNULEE';
}

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ D√©but de la route lengo-cashin');
    
    const body = await request.json();
    console.log('üìã Body re√ßu:', body);
    
    // body doit contenir: amount, phone, description, partnerId (optionnel), type_account (optionnel), requestId (optionnel), employeId (optionnel)
    const { amount, phone, description, partnerId, type_account, requestId, employeId } = body;

    if (!amount || !phone || !description) {
      console.error('‚ùå Param√®tres manquants:', { amount, phone, description });
      return NextResponse.json({ 
        success: false, 
        error: 'Param√®tres manquants: amount, phone, description sont requis' 
      }, { status: 400 });
    }

    // V√©rifier s'il existe d√©j√† une transaction pour cette demande
    if (requestId) {
      console.log('üîç V√©rification des transactions existantes pour la demande:', requestId);
      
      const { data: existingTransactions, error: checkError } = await supabase
        .from('transactions')
        .select('id, numero_transaction, statut, date_creation')
        .eq('demande_avance_id', requestId)
        .order('date_creation', { ascending: false });

      if (checkError) {
        console.error('‚ùå Erreur lors de la v√©rification des transactions existantes:', checkError);
      } else if (existingTransactions && existingTransactions.length > 0) {
        console.log('‚ö†Ô∏è Transactions existantes trouv√©es:', existingTransactions);
        
        // V√©rifier s'il y a une transaction r√©cente (moins de 5 minutes)
        const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
        const recentTransaction = existingTransactions.find(t => 
          new Date(t.date_creation) > fiveMinutesAgo
        );

        if (recentTransaction) {
          console.log('‚ùå Transaction r√©cente trouv√©e, √©viter le doublon:', recentTransaction);
          return NextResponse.json({ 
            success: false, 
            error: 'Une transaction pour cette demande a d√©j√† √©t√© initi√©e r√©cemment. Veuillez attendre quelques minutes avant de r√©essayer.',
            existingTransaction: recentTransaction
          }, { status: 409 });
        }

        // V√©rifier s'il y a une transaction r√©ussie
        const successfulTransaction = existingTransactions.find(t => t.statut === 'EFFECTUEE');
        if (successfulTransaction) {
          console.log('‚ùå Transaction r√©ussie d√©j√† existante:', successfulTransaction);
          return NextResponse.json({ 
            success: false, 
            error: 'Cette demande a d√©j√† √©t√© pay√©e avec succ√®s.',
            existingTransaction: successfulTransaction
          }, { status: 409 });
        }

        // V√©rifier s'il y a une transaction annul√©e √† mettre √† jour
        const cancelledTransaction = existingTransactions.find(t => t.statut === 'ANNULEE');
        if (cancelledTransaction) {
          console.log('üîÑ Transaction annul√©e trouv√©e, mise √† jour au lieu de cr√©er:', cancelledTransaction);
          
          // Mettre √† jour la transaction existante au lieu d'en cr√©er une nouvelle
          const { data: updatedTransaction, error: updateError } = await supabase
            .from('transactions')
            .update({
              statut: 'ANNULEE', // Utiliser ANNULEE au lieu de EN_ATTENTE
              date_creation: new Date().toISOString(),
              date_transaction: null
            })
            .eq('id', cancelledTransaction.id)
            .select()
            .single();

          if (updateError) {
            console.error('‚ùå Erreur mise √† jour transaction:', updateError);
            return NextResponse.json({ success: false, error: 'Erreur DB: ' + updateError.message }, { status: 500 });
          }

          console.log('‚úÖ Transaction mise √† jour avec succ√®s:', updatedTransaction);
          
          // Retourner la transaction mise √† jour
          return NextResponse.json({
            success: true,
            pay_id: cancelledTransaction.numero_transaction, // R√©utiliser l'ancien pay_id
            transaction: updatedTransaction,
            message: 'Transaction relanc√©e avec succ√®s',
            status: 'Request received successfully',
            note: 'Transaction annul√©e relanc√©e'
          });
        }

        console.log('‚ÑπÔ∏è Transactions existantes mais anciennes ou √©chou√©es, continuer avec le nouveau paiement');
      }
    }

    // Normaliser le num√©ro de t√©l√©phone
    const normalizedPhone = normalizePhone(phone);
    console.log('üì± Num√©ro normalis√©:', { original: phone, normalized: normalizedPhone });

    console.log('üîß V√©rification des variables d\'environnement:');
    console.log('  - LENGO_SITE_ID:', LENGO_SITE_ID ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
    console.log('  - LENGO_CALLBACK_URL:', LENGO_CALLBACK_URL ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
    console.log('  - SUPABASE_ANON_KEY:', supabaseAnonKey ? '‚úÖ Pr√©sent' : '‚ùå Manquant');

    // Pr√©parer les param√®tres pour Lengo Pay selon la doc officielle
    const lengoParams: LengoPayCashinParams = {
      amount: amount.toString(),
      currency: 'GNF',
      websiteid: LENGO_SITE_ID || '',
      type_account: type_account || 'lp-om-gn',
      account: normalizedPhone,
      callback_url: LENGO_CALLBACK_URL,
    };

    console.log('üí≥ Param√®tres Lengo Pay pr√©par√©s:', { 
      ...lengoParams, 
      description, 
      partnerId,
      requestId,
      employeId,
      amount: lengoParams.amount + ' ' + lengoParams.currency,
      originalPhone: phone,
      normalizedPhone: normalizedPhone
    });

    // Appel √† Lengo Pay
    console.log('üåê Appel de l\'API Lengo Pay...');
    const lengoResult = await lengoPayCashin(lengoParams);
    console.log('‚úÖ R√©ponse Lengo Pay re√ßue:', lengoResult);

    // V√©rifier si la requ√™te a √©t√© re√ßue avec succ√®s
    if (!lengoResult.pay_id) {
      console.error('‚ùå Erreur Lengo Pay - Pas de pay_id:', lengoResult);
      return NextResponse.json({ success: false, error: lengoResult.message || 'Erreur Lengo Pay - Pas de pay_id' }, { status: 502 });
    }

    // Si le statut n'est pas "Success" mais qu'on a un pay_id, c'est probablement "Request received successfully"
    if (lengoResult.status !== 'Success') {
      console.log('‚ö†Ô∏è Statut Lengo Pay diff√©rent de Success:', lengoResult.status);
      console.log('‚ÑπÔ∏è Mais pay_id re√ßu, on continue avec la cr√©ation de la transaction');
    }

    // Ins√©rer la transaction dans la table transactions
    console.log('üíæ Insertion de la transaction dans la base de donn√©es...');
    const mappedMethodePaiement = mapTypeAccountToMethodePaiement(lengoParams.type_account);
    const mappedStatut = mapLengoStatusToTransactionStatut(lengoResult.status);
    
    console.log('üîÑ Mapping des donn√©es:', { 
      methode_paiement: { original: lengoParams.type_account, mapped: mappedMethodePaiement },
      statut: { original: lengoResult.status, mapped: mappedStatut }
    });
    
    const transactionData = {
      montant: parseFloat(amount),
      numero_transaction: lengoResult.pay_id,
      methode_paiement: mappedMethodePaiement,
      numero_compte: phone,
      description: description,
      entreprise_id: partnerId || null,
      demande_avance_id: requestId || null,
      employe_id: employeId || null,
      statut: mappedStatut,
      date_creation: new Date().toISOString(),
      date_transaction: lengoResult.status === 'Success' ? new Date().toISOString() : null,
    };
    
    console.log('üìä Donn√©es de transaction √† ins√©rer:', transactionData);
    
    const { data, error } = await supabase
      .from('transactions')
      .insert([transactionData])
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erreur insertion transaction:', error);
      return NextResponse.json({ success: false, error: 'Erreur DB: ' + error.message }, { status: 500 });
    }

    console.log('‚úÖ Transaction ins√©r√©e avec succ√®s:', data);

    // V√©rifier le statut du paiement imm√©diatement apr√®s l'insertion
    console.log('üîç V√©rification imm√©diate du statut du paiement...');
    try {
      const statusResponse = await fetch(`${request.nextUrl.origin}/api/payments/lengo-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          pay_id: lengoResult.pay_id
        })
      });

      if (statusResponse.ok) {
        const statusResult = await statusResponse.json();
        console.log('‚úÖ Statut v√©rifi√©:', statusResult);
        
        // Si le paiement est d√©j√† r√©ussi, mettre √† jour la demande d'avance
        if (statusResult.db_status === 'EFFECTUEE' && requestId) {
          console.log('üîÑ Mise √† jour du statut de la demande d\'avance (paiement r√©ussi):', requestId);
          
          const { error: updateError } = await supabase
            .from('salary_advance_requests')
            .update({ 
              statut: 'Valid√©',
              date_validation: new Date().toISOString(),
              numero_reception: lengoResult.pay_id
            })
            .eq('id', requestId);

          if (updateError) {
            console.error('‚ö†Ô∏è Erreur lors de la mise √† jour du statut de la demande:', updateError);
          } else {
            console.log('‚úÖ Statut de la demande d\'avance mis √† jour avec succ√®s');
          }
        }
      } else {
        console.log('‚ö†Ô∏è Impossible de v√©rifier le statut imm√©diatement, sera v√©rifi√© plus tard');
      }
    } catch (statusError) {
      console.error('‚ö†Ô∏è Erreur lors de la v√©rification du statut:', statusError);
      // Ne pas faire √©chouer la requ√™te principale
    }

    console.log('üéâ Route lengo-cashin termin√©e avec succ√®s');

    return NextResponse.json({
      success: true,
      pay_id: lengoResult.pay_id,
      transaction: data,
      message: lengoResult.message || 'Transaction cr√©√©e avec succ√®s',
      status: lengoResult.status,
      note: lengoResult.status !== 'Success' ? 'Paiement en cours de traitement' : 'Paiement trait√© avec succ√®s'
    });
  } catch (error) {
    console.error('üí• Erreur g√©n√©rale dans la route lengo-cashin:', error);
    console.error('üìã D√©tails de l\'erreur:', {
      name: error instanceof Error ? error.name : 'Unknown',
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : 'No stack trace'
    });
    
    return NextResponse.json({ 
      success: false, 
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      details: process.env.NODE_ENV === 'development' ? {
        name: error instanceof Error ? error.name : 'Unknown',
        stack: error instanceof Error ? error.stack : 'No stack trace'
      } : undefined
    }, { status: 500 });
  }
} 