-- ============================================================================
-- CORRECTION URGENTE : Remboursements existants avec montants incorrects
-- ============================================================================
-- PROBL√àME : Certains remboursements ont montant_total_remboursement = montant net
-- au lieu du montant demand√© original

-- 1. DIAGNOSTIC DU PROBL√àME
SELECT 
    '=== REMBOURSEMENTS AVEC MONTANTS INCORRECTS ===' as diagnostic,
    r.id,
    t.montant as transaction_montant_original,
    r.montant_transaction as remb_montant_transaction,
    r.frais_service as remb_frais_service,
    r.montant_total_remboursement as remb_montant_total,
    CASE 
        WHEN r.montant_total_remboursement = t.montant THEN '‚úÖ CORRECT'
        WHEN r.montant_total_remboursement = (t.montant - r.frais_service) THEN '‚ùå MONTANT NET (INCORRECT)'
        WHEN r.montant_total_remboursement = (t.montant + r.frais_service) THEN '‚ùå MONTANT + FRAIS (INCORRECT)'
        ELSE '‚ùå AUTRE LOGIQUE INCORRECTE'
    END as diagnostic_montant,
    (t.montant - r.montant_total_remboursement) as difference_a_corriger
FROM remboursements r
JOIN transactions t ON r.transaction_id = t.id
WHERE r.montant_total_remboursement != t.montant
ORDER BY r.created_at DESC;

-- 2. IDENTIFIER LES REMBOURSEMENTS √Ä CORRIGER
-- Ceux o√π montant_total_remboursement = montant_transaction mais montant_transaction ‚â† montant demand√© original
WITH remboursements_incorrects AS (
    SELECT 
        r.id,
        r.montant_transaction,
        r.montant_total_remboursement,
        r.frais_service,
        t.montant as montant_original_demande,
        -- Recalculer le montant original demand√©
        CASE 
            -- Si montant_transaction semble √™tre le net (montant - frais), retrouver l'original
            WHEN r.montant_transaction = (r.montant_transaction - r.frais_service) THEN 
                r.montant_transaction + r.frais_service
            ELSE 
                t.montant
        END as montant_correct_a_rembourser
    FROM remboursements r
    JOIN transactions t ON r.transaction_id = t.id
    WHERE r.montant_total_remboursement != t.montant
)
SELECT 
    '=== REMBOURSEMENTS √Ä CORRIGER ===' as correction_necessaire,
    COUNT(*) as nombre_remboursements_incorrects,
    SUM(montant_correct_a_rembourser - montant_total_remboursement) as montant_total_difference
FROM remboursements_incorrects;

-- 3. CORRIGER SELON DEUX SC√âNARIOS

-- Sc√©nario A: Corriger en utilisant le montant de la transaction comme r√©f√©rence
UPDATE remboursements 
SET 
    montant_total_remboursement = (
        SELECT t.montant 
        FROM transactions t 
        WHERE t.id = remboursements.transaction_id
    ),
    commentaire_admin = COALESCE(commentaire_admin, '') || ' | CORRIG√â: montant_total_remboursement ajust√© selon logique ZaLaMa (partenaire paie montant demand√© original)'
WHERE montant_total_remboursement != (
    SELECT t.montant 
    FROM transactions t 
    WHERE t.id = remboursements.transaction_id
);

-- 4. CAS SP√âCIAL: Si montant_transaction lui-m√™me est incorrect (montant net au lieu du montant demand√©)
-- Corriger d'abord montant_transaction puis montant_total_remboursement
UPDATE remboursements 
SET 
    montant_transaction = montant_transaction + frais_service,
    montant_total_remboursement = montant_transaction + frais_service,
    commentaire_admin = COALESCE(commentaire_admin, '') || ' | CORRIG√â: montant_transaction et montant_total_remboursement recalcul√©s (ajout frais service)'
WHERE montant_transaction = montant_total_remboursement 
AND montant_transaction < (montant_transaction + frais_service)
AND EXISTS (
    SELECT 1 FROM transactions t 
    WHERE t.id = remboursements.transaction_id 
    AND t.montant > remboursements.montant_transaction
);

-- 5. V√âRIFICATION FINALE APR√àS CORRECTION
SELECT 
    '=== V√âRIFICATION APR√àS CORRECTION ===' as verification,
    COUNT(*) as total_remboursements,
    COUNT(CASE WHEN r.montant_total_remboursement = t.montant THEN 1 END) as logique_correcte,
    COUNT(CASE WHEN r.montant_total_remboursement != t.montant THEN 1 END) as logique_incorrecte,
    ROUND(
        (COUNT(CASE WHEN r.montant_total_remboursement = t.montant THEN 1 END)::DECIMAL / COUNT(*)) * 100, 
        2
    ) as pourcentage_correct
FROM remboursements r
JOIN transactions t ON r.transaction_id = t.id;

-- 6. D√âTAIL DES CORRECTIONS APPLIQU√âES
SELECT 
    '=== D√âTAIL DES CORRECTIONS ===' as detail,
    r.id,
    t.montant as transaction_montant_original,
    r.montant_transaction as remb_montant_transaction,
    r.frais_service as remb_frais_service,
    r.montant_total_remboursement as remb_montant_total_corrige,
    CASE 
        WHEN r.montant_total_remboursement = t.montant THEN '‚úÖ CORRECT'
        ELSE '‚ùå ENCORE INCORRECT'
    END as statut_final,
    r.commentaire_admin
FROM remboursements r
JOIN transactions t ON r.transaction_id = t.id
WHERE r.commentaire_admin LIKE '%CORRIG√â%'
ORDER BY r.updated_at DESC;

-- 7. INSTRUCTIONS DE VALIDATION
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ =======================================';
    RAISE NOTICE 'üéØ CORRECTION DES MONTANTS TERMIN√âE';
    RAISE NOTICE 'üéØ =======================================';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã V√âRIFICATIONS √Ä EFFECTUER:';
    RAISE NOTICE '1. Tous les montant_total_remboursement doivent √©galer transaction.montant';
    RAISE NOTICE '2. Les frais_service restent informatifs (6.5%% du montant demand√©)';
    RAISE NOTICE '3. La logique ZaLaMa est respect√©e: partenaire paie montant demand√© pur';
    RAISE NOTICE '';
    RAISE NOTICE 'üîÑ POUR V√âRIFIER DANS L''APPLICATION:';
    RAISE NOTICE '   - Rafra√Æchissez la page remboursements';
    RAISE NOTICE '   - V√©rifiez que les montants correspondent √† la logique ZaLaMa';
    RAISE NOTICE '   - Le montant √† rembourser doit √™tre = montant demand√© original';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Script de correction ex√©cut√© !';
END $$; 