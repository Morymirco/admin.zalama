require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://mspmrzlqhwpdkkburjiw.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1zcG1yemxxaHdwZGtrYnVyaml3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3ODcyNTgsImV4cCI6MjA2NjM2MzI1OH0.zr-TRpKjGJjW0nRtsyPcCLy4Us-c5tOGX71k5_3JJd0';

console.log('üîç Analyse CORRIG√âE des employ√©s avec user_id NULL');
console.log('üîç Variables d\'environnement:');
console.log('- SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ Pr√©sent' : '‚ùå Manquant');

// Client Supabase
const supabaseKey = supabaseServiceKey || supabaseAnonKey;
const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeNullUserIdFixed() {
  try {
    console.log('\nüîÑ R√©cup√©ration des employ√©s avec user_id NULL...');
    
    // R√©cup√©rer les employ√©s sans user_id
    const { data: employeesWithoutUserId, error } = await supabase
      .from('employees')
      .select(`
        *,
        partners:partner_id (
          id,
          nom
        )
      `)
      .is('user_id', null)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', error);
      return;
    }

    if (!employeesWithoutUserId || employeesWithoutUserId.length === 0) {
      console.log('‚úÖ Aucun employ√© avec user_id NULL trouv√©');
      return;
    }

    console.log(`\nüìã Employ√©s avec user_id NULL (${employeesWithoutUserId.length}):`);
    console.log('‚îÄ'.repeat(100));
    
    // R√©cup√©rer tous les utilisateurs Auth une seule fois
    console.log('\nüîç R√©cup√©ration de tous les comptes Auth...');
    const { data: allAuthUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs Auth:', authError);
      return;
    }

    console.log(`üìä Total comptes Auth: ${allAuthUsers.users.length}`);
    
    for (const emp of employeesWithoutUserId) {
      console.log(`\nüë§ Employ√©: ${emp.prenom} ${emp.nom}`);
      console.log(`   ID: ${emp.id}`);
      console.log(`   Email: ${emp.email}`);
      console.log(`   Partenaire: ${emp.partners?.nom || 'N/A'}`);
      console.log(`   Cr√©√© le: ${emp.created_at}`);
      console.log(`   Modifi√© le: ${emp.updated_at}`);
      console.log(`   Actif: ${emp.actif ? 'Oui' : 'Non'}`);
      console.log(`   User ID: ${emp.user_id || 'NULL'}`);
      
      // Chercher le compte Auth correspondant
      console.log(`\nüîç Recherche du compte Auth pour: ${emp.email}`);
      
      const matchingAuthUser = allAuthUsers.users.find(user => user.email === emp.email);
      
      if (matchingAuthUser) {
        console.log(`   ‚úÖ Compte Auth trouv√©:`);
        console.log(`      - User ID: ${matchingAuthUser.id}`);
        console.log(`      - Email: ${matchingAuthUser.email}`);
        console.log(`      - Cr√©√© le: ${matchingAuthUser.created_at}`);
        console.log(`      - Confirm√©: ${matchingAuthUser.email_confirmed_at ? 'Oui' : 'Non'}`);
        console.log(`      - Derni√®re connexion: ${matchingAuthUser.last_sign_in_at || 'Jamais'}`);
        
        // V√©rifier s'il y a une entr√©e dans admin_users
        const { data: adminUser, error: adminError } = await supabase
          .from('admin_users')
          .select('*')
          .eq('id', matchingAuthUser.id)
          .single();
        
        if (adminError && adminError.code !== 'PGRST116') {
          console.log(`   ‚ùå Erreur admin_users: ${adminError.message}`);
        } else if (adminUser) {
          console.log(`   ‚úÖ Entr√©e admin_users trouv√©e:`);
          console.log(`      - Role: ${adminUser.role}`);
          console.log(`      - Cr√©√© le: ${adminUser.created_at}`);
        } else {
          console.log(`   ‚ùå Pas d'entr√©e dans admin_users`);
        }
        
        // Probl√®me identifi√©: Auth user existe mais pas li√© √† l'employ√©
        console.log(`   ‚ö†Ô∏è PROBL√àME IDENTIFI√â: Le compte Auth existe mais n'est pas li√© √† l'employ√©!`);
        console.log(`   üí° SOLUTION: Mettre √† jour l'employ√© avec user_id: ${matchingAuthUser.id}`);
        
      } else {
        console.log(`   ‚ùå Aucun compte Auth trouv√© avec l'email: ${emp.email}`);
        
        // V√©rifier s'il y a des comptes Auth similaires
        const similarAuthUsers = allAuthUsers.users.filter(user => 
          user.email.includes(emp.email.split('@')[0]) ||
          emp.email.includes(user.email.split('@')[0])
        );
        
        if (similarAuthUsers.length > 0) {
          console.log(`   üîç Comptes Auth similaires trouv√©s:`);
          similarAuthUsers.forEach(user => {
            console.log(`      - ${user.email} (ID: ${user.id})`);
          });
        }
        
        console.log(`   üí° SOLUTION: Cr√©er un nouveau compte Auth pour cet employ√©`);
      }
      
      console.log('‚îÄ'.repeat(100));
    }

    // Analyser les patterns
    console.log(`\nüìä Analyse des patterns:`);
    
    const creationDates = employeesWithoutUserId.map(emp => new Date(emp.created_at));
    const earliestDate = new Date(Math.min(...creationDates));
    const latestDate = new Date(Math.max(...creationDates));
    
    console.log(`- P√©riode de cr√©ation: ${earliestDate.toLocaleDateString()} √† ${latestDate.toLocaleDateString()}`);
    console.log(`- Tous les employ√©s ont un email: ${employeesWithoutUserId.every(emp => emp.email) ? 'Oui' : 'Non'}`);
    console.log(`- Tous les employ√©s sont actifs: ${employeesWithoutUserId.every(emp => emp.actif) ? 'Oui' : 'Non'}`);
    
    // V√©rifier les partenaires
    const partnerIds = [...new Set(employeesWithoutUserId.map(emp => emp.partner_id))];
    console.log(`- Partenaires concern√©s: ${partnerIds.length}`);
    partnerIds.forEach(partnerId => {
      const partnerEmps = employeesWithoutUserId.filter(emp => emp.partner_id === partnerId);
      const partnerName = partnerEmps[0].partners?.nom || 'Inconnu';
      console.log(`  * ${partnerName}: ${partnerEmps.length} employ√©s`);
    });

    // Compter les employ√©s avec et sans compte Auth
    const employeesWithAuth = employeesWithoutUserId.filter(emp => 
      allAuthUsers.users.some(user => user.email === emp.email)
    );
    const employeesWithoutAuth = employeesWithoutUserId.filter(emp => 
      !allAuthUsers.users.some(user => user.email === emp.email)
    );

    console.log(`\nüìà R√©sum√© des probl√®mes:`);
    console.log(`- Employ√©s avec compte Auth mais pas de user_id: ${employeesWithAuth.length}`);
    console.log(`- Employ√©s sans compte Auth: ${employeesWithoutAuth.length}`);

    console.log(`\nüí° Recommandations:`);
    if (employeesWithAuth.length > 0) {
      console.log(`1. ${employeesWithAuth.length} employ√©s ont un compte Auth mais pas de user_id`);
      console.log(`   ‚Üí Mettre √† jour le user_id de ces employ√©s`);
    }
    if (employeesWithoutAuth.length > 0) {
      console.log(`2. ${employeesWithoutAuth.length} employ√©s n'ont pas de compte Auth`);
      console.log(`   ‚Üí Cr√©er des comptes Auth pour ces employ√©s`);
    }
    console.log(`3. V√©rifier le processus de cr√©ation utilis√© pour ces employ√©s`);
    console.log(`4. S'assurer que les nouveaux employ√©s utilisent le bon processus`);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le script
analyzeNullUserIdFixed(); 