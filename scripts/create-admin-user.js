// Charger les variables d'environnement depuis .env.local
require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase - Variables d√©finies directement
const supabaseUrl = 'https://mspmrzlqhwpdkkburjiw.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1zcG1yemxxaHdwZGtrYnVyaml3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDc4NzI1OCwiZXhwIjoyMDY2MzYzMjU4fQ.6sIgEDZIP1fkUoxdPJYfzKHU1B_SfN6Hui6v_FV6yzw';

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.log('Assurez-vous que NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY sont d√©finies dans .env.local');
  console.log('\nV√©rification des variables :');
  console.log(`   NEXT_PUBLIC_SUPABASE_URL: ${supabaseUrl ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);
  console.log(`   SUPABASE_SERVICE_ROLE_KEY: ${supabaseServiceKey ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Configuration du compte admin par d√©faut
const DEFAULT_ADMIN = {
  email: 'admin@zalamagn.com',
  password: 'AdminZalama2024!',
  displayName: 'Administrateur Zalama',
  role: 'admin'
};

async function createAdminUser() {
  console.log('üöÄ Cr√©ation du compte administrateur par d√©faut\n');

  try {
    // V√©rifier la connexion
    console.log('1Ô∏è‚É£ V√©rification de la connexion Supabase...');
    const { data: authData, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Erreur de connexion Supabase:', authError.message);
      return;
    }
    
    console.log('‚úÖ Connexion Supabase r√©ussie');
    console.log(`   Utilisateurs existants: ${authData.users.length}\n`);

    // V√©rifier si l'admin existe d√©j√†
    console.log('2Ô∏è‚É£ V√©rification de l\'existence du compte admin...');
    const existingAdmin = authData.users.find(user => user.email === DEFAULT_ADMIN.email);
    
    if (existingAdmin) {
      console.log('‚ö†Ô∏è Le compte admin existe d√©j√†');
      console.log(`   Email: ${existingAdmin.email}`);
      console.log(`   ID: ${existingAdmin.id}`);
      console.log(`   Cr√©√© le: ${existingAdmin.created_at}`);
      
      // V√©rifier s'il est dans la table admin_users
      const { data: userRecord, error: userError } = await supabase
        .from('admin_users')
        .select('*')
        .eq('id', existingAdmin.id)
        .single();

      if (userError) {
        console.log('‚ö†Ô∏è L\'admin n\'est pas dans la table admin_users, ajout en cours...');
        await addUserRecord(existingAdmin);
      } else {
        console.log('‚úÖ L\'admin est d√©j√† dans la table admin_users');
        console.log(`   Nom: ${userRecord.display_name}`);
        console.log(`   R√¥le: ${userRecord.role}`);
      }
      
      return;
    }

    // Cr√©er le compte admin
    console.log('3Ô∏è‚É£ Cr√©ation du compte administrateur...');
    const { data: adminUser, error: createError } = await supabase.auth.admin.createUser({
      email: DEFAULT_ADMIN.email,
      password: DEFAULT_ADMIN.password,
      email_confirm: true,
      user_metadata: {
        displayName: DEFAULT_ADMIN.displayName,
        role: DEFAULT_ADMIN.role,
      },
    });

    if (createError) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'admin:', createError.message);
      return;
    }

    if (!adminUser.user) {
      console.error('‚ùå Aucun utilisateur cr√©√©');
      return;
    }

    console.log('‚úÖ Compte admin cr√©√© avec succ√®s');
    console.log(`   ID: ${adminUser.user.id}`);
    console.log(`   Email: ${adminUser.user.email}`);

    // Ajouter l'enregistrement dans la table admin_users
    console.log('\n4Ô∏è‚É£ Ajout dans la table admin_users...');
    await addUserRecord(adminUser.user);

    console.log('\nüéâ Compte administrateur cr√©√© avec succ√®s !');
    console.log('\nüìã Informations de connexion :');
    console.log(`   Email: ${DEFAULT_ADMIN.email}`);
    console.log(`   Mot de passe: ${DEFAULT_ADMIN.password}`);
    console.log('\n‚ö†Ô∏è IMPORTANT: Changez le mot de passe apr√®s la premi√®re connexion !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

async function addUserRecord(authUser) {
  try {
    const { data, error } = await supabase
      .from('admin_users')
      .insert([{
        id: authUser.id,
        email: authUser.email,
        display_name: authUser.user_metadata?.displayName || 'Administrateur',
        role: authUser.user_metadata?.role || 'admin',
        active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }])
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erreur lors de l\'ajout dans la table admin_users:', error.message);
    } else {
      console.log('‚úÖ Enregistrement ajout√© dans la table admin_users');
      console.log(`   Nom: ${data.display_name}`);
      console.log(`   R√¥le: ${data.role}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout dans la table admin_users:', error.message);
  }
}

// Fonction pour v√©rifier la configuration
async function checkConfiguration() {
  console.log('üîß V√©rification de la configuration...\n');
  
  console.log('Variables d\'environnement :');
  console.log(`   NEXT_PUBLIC_SUPABASE_URL: ${supabaseUrl ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);
  console.log(`   SUPABASE_SERVICE_ROLE_KEY: ${supabaseServiceKey ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);
  
  if (!supabaseUrl || !supabaseServiceKey) {
    console.log('\n‚ùå Configuration incompl√®te. Veuillez v√©rifier votre fichier .env.local');
    return false;
  }
  
  console.log('\n‚úÖ Configuration valide');
  return true;
}

// Ex√©cuter le script
async function main() {
  const configOk = await checkConfiguration();
  if (configOk) {
    await createAdminUser();
  }
}

main(); 