const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.error('Assurez-vous que NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY sont d√©finies dans .env.local');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createLogosBucket() {
  console.log('üîß Cr√©ation du bucket logos dans Supabase Storage...\n');

  try {
    // Cr√©er le bucket logos
    const { data, error } = await supabase.storage.createBucket('logos', {
      public: true,
      fileSizeLimit: 5242880, // 5MB
      allowedMimeTypes: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp']
    });

    if (error) {
      if (error.message.includes('already exists')) {
        console.log('‚úÖ Bucket "logos" existe d√©j√†');
      } else {
        console.error('‚ùå Erreur lors de la cr√©ation du bucket:', error);
        return;
      }
    } else {
      console.log('‚úÖ Bucket "logos" cr√©√© avec succ√®s');
    }

    // Cr√©er les politiques RLS pour le bucket
    console.log('\nüîí Configuration des politiques de s√©curit√©...');

    const policies = [
      {
        name: 'Logos publics accessibles √† tous',
        definition: 'SELECT',
        policy: 'true'
      },
      {
        name: 'Authenticated users can upload logos',
        definition: 'INSERT',
        policy: 'auth.role() = \'authenticated\''
      },
      {
        name: 'Users can update their own logos',
        definition: 'UPDATE',
        policy: 'auth.role() = \'authenticated\''
      },
      {
        name: 'Users can delete their own logos',
        definition: 'DELETE',
        policy: 'auth.role() = \'authenticated\''
      }
    ];

    for (const policyConfig of policies) {
      try {
        const { error: policyError } = await supabase.storage.createBucketPolicy('logos', {
          name: policyConfig.name,
          definition: policyConfig.definition,
          policy: policyConfig.policy
        });
        
        if (policyError) {
          if (policyError.message.includes('already exists')) {
            console.log(`‚úÖ Politique "${policyConfig.name}" existe d√©j√†`);
          } else {
            console.error(`‚ùå Erreur lors de la cr√©ation de la politique "${policyConfig.name}":`, policyError);
          }
        } else {
          console.log(`‚úÖ Politique "${policyConfig.name}" cr√©√©e`);
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de la configuration de la politique "${policyConfig.name}":`, error);
      }
    }

    console.log('\nüéâ Configuration du bucket termin√©e !');
    console.log('\nüìù Prochaines √©tapes :');
    console.log('1. Testez l\'upload de logo depuis l\'application');
    console.log('2. V√©rifiez que les logos sont accessibles publiquement');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration du bucket:', error);
  }
}

createLogosBucket().catch(console.error); 