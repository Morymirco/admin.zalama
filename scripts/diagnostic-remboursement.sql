-- =====================================================
-- DIAGNOSTIC: V√©rification du syst√®me de remboursement
-- =====================================================

-- 1. V√©rifier l'existence des tables
SELECT 
    table_name,
    CASE 
        WHEN table_name IN ('remboursements_integraux', 'historique_remboursements_integraux') 
        THEN '‚úÖ Existe' 
        ELSE '‚ùå Manquant' 
    END as status
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('remboursements_integraux', 'historique_remboursements_integraux');

-- 2. V√©rifier l'existence des fonctions
SELECT 
    proname as function_name,
    CASE 
        WHEN proname IN ('creer_remboursement_integral_direct', 'creer_remboursement_integral_automatique', 'creer_remboursements_manquants') 
        THEN '‚úÖ Existe' 
        ELSE '‚ùå Manquant' 
    END as status
FROM pg_proc 
WHERE proname IN (
    'creer_remboursement_integral_direct',
    'creer_remboursement_integral_automatique', 
    'creer_remboursements_manquants'
);

-- 3. V√©rifier l'existence et l'√©tat du trigger
SELECT 
    tgname as trigger_name,
    tgrelid::regclass as table_name,
    CASE 
        WHEN tgname = 'trigger_creer_remboursement_integral' THEN '‚úÖ Existe'
        ELSE '‚ùå Manquant'
    END as status,
    CASE tgenabled
        WHEN 'O' THEN '‚úÖ Actif'
        WHEN 'D' THEN '‚ùå D√©sactiv√©'
        WHEN 'R' THEN '‚ö†Ô∏è D√©sactiv√© (replica)'
        ELSE '‚ùì Inconnu'
    END as trigger_state
FROM pg_trigger 
WHERE tgname = 'trigger_creer_remboursement_integral';

-- 4. Compter les transactions EFFECTUEE
SELECT 
    COUNT(*) as total_transactions_effectuee,
    COUNT(DISTINCT partenaire_id) as partenaires_concernes
FROM transactions 
WHERE statut = 'EFFECTUEE';

-- 5. Compter les remboursements existants
SELECT 
    COUNT(*) as total_remboursements,
    COUNT(CASE WHEN status = 'EN_ATTENTE' THEN 1 END) as en_attente,
    COUNT(CASE WHEN status = 'PAYE' THEN 1 END) as payes,
    COUNT(CASE WHEN status = 'EN_RETARD' THEN 1 END) as en_retard,
    COUNT(CASE WHEN status = 'ANNULE' THEN 1 END) as annules
FROM remboursements_integraux;

-- 6. Identifier les transactions EFFECTUEE sans remboursement
SELECT 
    t.id as transaction_id,
    t.montant,
    t.frais_service,
    t.date_creation,
    p.nom as partenaire_nom,
    e.nom as employe_nom
FROM transactions t
LEFT JOIN partenaires p ON t.partenaire_id = p.id
LEFT JOIN employes e ON t.employe_id = e.id
WHERE t.statut = 'EFFECTUEE'
AND NOT EXISTS (
    SELECT 1 FROM remboursements_integraux r 
    WHERE r.transaction_id = t.id
)
ORDER BY t.date_creation DESC;

-- 7. Tester la cr√©ation d'un remboursement manquant (si il y en a)
-- D√©commentez la ligne suivante pour cr√©er les remboursements manquants
-- SELECT creer_remboursements_manquants();

-- 8. V√©rifier la coh√©rence des donn√©es
SELECT 
    'Transactions EFFECTUEE' as type,
    COUNT(*) as count
FROM transactions 
WHERE statut = 'EFFECTUEE'
UNION ALL
SELECT 
    'Remboursements cr√©√©s' as type,
    COUNT(*) as count
FROM remboursements_integraux
UNION ALL
SELECT 
    'Transactions sans remboursement' as type,
    COUNT(*) as count
FROM transactions t
WHERE t.statut = 'EFFECTUEE'
AND NOT EXISTS (
    SELECT 1 FROM remboursements_integraux r 
    WHERE r.transaction_id = t.id
);

-- =====================================================
-- 9. RECOMMANDATIONS
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç DIAGNOSTIC TERMIN√â';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã RECOMMANDATIONS:';
    RAISE NOTICE '1. V√©rifiez que les triggers sont bien cr√©√©s';
    RAISE NOTICE '2. V√©rifiez que les transactions ont bien demande_avance_id';
    RAISE NOTICE '3. V√©rifiez que les demandes d''avance existent';
    RAISE NOTICE '4. Ex√©cutez le script de correction si n√©cessaire';
    RAISE NOTICE '';
END $$; 