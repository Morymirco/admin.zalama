const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://mspmrzlqhwpdkkburjiw.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY is not defined');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Fonction pour g√©n√©rer un mot de passe s√©curis√©
function generatePassword() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
  let password = '';
  for (let i = 0; i < 12; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password;
}

async function migrateEmployeesUserId() {
  console.log('üîÑ D√©but de la migration des user_id pour les employ√©s...\n');

  try {
    // 1. R√©cup√©rer tous les employ√©s qui ont un email mais pas de user_id
    console.log('üìã R√©cup√©ration des employ√©s sans user_id...');
    const { data: employees, error: employeesError } = await supabase
      .from('employees')
      .select('*')
      .is('user_id', null)
      .not('email', 'is', null);

    if (employeesError) {
      throw new Error(`Erreur lors de la r√©cup√©ration des employ√©s: ${employeesError.message}`);
    }

    console.log(`üìä ${employees.length} employ√©s trouv√©s sans user_id`);

    if (employees.length === 0) {
      console.log('‚úÖ Aucun employ√© √† migrer');
      return;
    }

    // 2. Pour chaque employ√©, cr√©er un compte Auth et mettre √† jour le user_id
    let updatedCount = 0;
    let errorCount = 0;
    const results = [];

    for (const employee of employees) {
      try {
        console.log(`\nüîÑ Traitement de l'employ√©: ${employee.prenom} ${employee.nom} (${employee.email})`);

        // V√©rifier si un compte Auth existe d√©j√† avec cet email
        const { data: authUsers, error: listError } = await supabase.auth.admin.listUsers();
        if (listError) {
          throw new Error(`Erreur lors de la liste des utilisateurs Auth: ${listError.message}`);
        }

        const existingUser = authUsers.users.find(user => user.email === employee.email);
        
        if (existingUser) {
          console.log(`‚úÖ Compte Auth existant trouv√© pour ${employee.email}`);
          
          // Mettre √† jour l'employ√© avec le user_id existant
          const { error: updateError } = await supabase
            .from('employees')
            .update({ user_id: existingUser.id })
            .eq('id', employee.id);

          if (updateError) {
            throw new Error(`Erreur lors de la mise √† jour: ${updateError.message}`);
          }

          results.push({
            employeeId: employee.id,
            email: employee.email,
            action: 'SYNCED_EXISTING',
            userId: existingUser.id,
            success: true
          });
          updatedCount++;
          
        } else {
          console.log(`üÜï Cr√©ation d'un nouveau compte Auth pour ${employee.email}`);
          
          // G√©n√©rer un mot de passe s√©curis√©
          const password = generatePassword();

          // Cr√©er le compte dans Supabase Auth
          const { data: authData, error: authError } = await supabase.auth.admin.createUser({
            email: employee.email,
            password: password,
            email_confirm: true,
            user_metadata: {
              display_name: `${employee.prenom} ${employee.nom}`,
              role: 'user',
              partenaire_id: employee.partner_id,
              employee_id: employee.id
            }
          });

          if (authError) {
            throw new Error(`Erreur lors de la cr√©ation du compte Auth: ${authError.message}`);
          }

          // Mettre √† jour l'employ√© avec le user_id
          const { error: updateError } = await supabase
            .from('employees')
            .update({ user_id: authData.user.id })
            .eq('id', employee.id);

          if (updateError) {
            // Supprimer le compte Auth cr√©√© en cas d'erreur
            await supabase.auth.admin.deleteUser(authData.user.id);
            throw new Error(`Erreur lors de la mise √† jour: ${updateError.message}`);
          }

          results.push({
            employeeId: employee.id,
            email: employee.email,
            action: 'CREATED_NEW',
            userId: authData.user.id,
            password: password,
            success: true
          });
          updatedCount++;
          
          console.log(`‚úÖ Compte Auth cr√©√© et employ√© mis √† jour: ${authData.user.id}`);
        }

      } catch (error) {
        console.error(`‚ùå Erreur pour l'employ√© ${employee.email}:`, error.message);
        results.push({
          employeeId: employee.id,
          email: employee.email,
          action: 'FAILED',
          error: error.message,
          success: false
        });
        errorCount++;
      }
    }

    // 3. Afficher le r√©sum√©
    console.log('\nüìä R√©sum√© de la migration:');
    console.log(`‚úÖ Employ√©s mis √† jour avec succ√®s: ${updatedCount}`);
    console.log(`‚ùå Erreurs: ${errorCount}`);
    console.log(`üìã Total trait√©: ${employees.length}`);

    // 4. Afficher les d√©tails des r√©sultats
    console.log('\nüìã D√©tails des r√©sultats:');
    results.forEach((result, index) => {
      if (result.success) {
        console.log(`${index + 1}. ‚úÖ ${result.email} - ${result.action} (${result.userId})`);
        if (result.password) {
          console.log(`   üîë Mot de passe temporaire: ${result.password}`);
        }
      } else {
        console.log(`${index + 1}. ‚ùå ${result.email} - ${result.error}`);
      }
    });

    // 5. V√©rifier qu'il n'y a plus d'employ√©s sans user_id
    const { data: remainingEmployees, error: checkError } = await supabase
      .from('employees')
      .select('id, email')
      .is('user_id', null)
      .not('email', 'is', null);

    if (checkError) {
      console.error('‚ùå Erreur lors de la v√©rification finale:', checkError.message);
    } else {
      console.log(`\nüîç V√©rification finale: ${remainingEmployees.length} employ√©s restent sans user_id`);
      if (remainingEmployees.length > 0) {
        console.log('‚ö†Ô∏è Employ√©s restants sans user_id:');
        remainingEmployees.forEach(emp => {
          console.log(`   - ${emp.email}`);
        });
      }
    }

  } catch (error) {
    console.error('üí• Erreur g√©n√©rale lors de la migration:', error);
    process.exit(1);
  }
}

// Ex√©cuter la migration
migrateEmployeesUserId()
  .then(() => {
    console.log('\nüéâ Migration termin√©e avec succ√®s!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• Migration √©chou√©e:', error);
    process.exit(1);
  }); 