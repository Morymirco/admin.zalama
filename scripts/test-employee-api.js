require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://mspmrzlqhwpdkkburjiw.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1zcG1yemxxaHdwZGtrYnVyaml3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3ODcyNTgsImV4cCI6MjA2NjM2MzI1OH0.zr-TRpKjGJjW0nRtsyPcCLy4Us-c5tOGX71k5_3JJd0';

console.log('üß™ Test de l\'API employees');
console.log('üß™ Variables d\'environnement:');
console.log('- SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ Pr√©sent' : '‚ùå Manquant');

// Client Supabase
const supabaseKey = supabaseServiceKey || supabaseAnonKey;
const supabase = createClient(supabaseUrl, supabaseKey);

async function testEmployeeAPI() {
  try {
    console.log('\nüîÑ Test de l\'API GET /api/employees...');
    
    // R√©cup√©rer un partenaire pour le test
    const { data: partners, error: partnersError } = await supabase
      .from('partners')
      .select('id, nom')
      .limit(1);

    if (partnersError || !partners || partners.length === 0) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des partenaires:', partnersError);
      return;
    }

    const partner = partners[0];
    console.log(`üìã Partenaire s√©lectionn√©: ${partner.nom} (${partner.id})`);

    // Test 1: R√©cup√©rer tous les employ√©s
    console.log('\nüìä Test 1: R√©cup√©rer tous les employ√©s');
    try {
      const response1 = await fetch('http://localhost:3000/api/employees');
      const result1 = await response1.json();
      
      console.log(`   - Status: ${response1.status}`);
      console.log(`   - Success: ${result1.success}`);
      console.log(`   - Count: ${result1.count}`);
      
      if (result1.success) {
        console.log(`   ‚úÖ SUCC√àS: ${result1.count} employ√©s r√©cup√©r√©s`);
      } else {
        console.log(`   ‚ùå √âCHEC: ${result1.error}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ERREUR: ${error.message}`);
    }

    // Test 2: R√©cup√©rer les employ√©s d'un partenaire
    console.log('\nüìä Test 2: R√©cup√©rer les employ√©s du partenaire');
    try {
      const response2 = await fetch(`http://localhost:3000/api/employees?partner_id=${partner.id}`);
      const result2 = await response2.json();
      
      console.log(`   - Status: ${response2.status}`);
      console.log(`   - Success: ${result2.success}`);
      console.log(`   - Count: ${result2.count}`);
      
      if (result2.success) {
        console.log(`   ‚úÖ SUCC√àS: ${result2.count} employ√©s du partenaire r√©cup√©r√©s`);
        if (result2.employees && result2.employees.length > 0) {
          console.log(`   - Premier employ√©: ${result2.employees[0].prenom} ${result2.employees[0].nom}`);
        }
      } else {
        console.log(`   ‚ùå √âCHEC: ${result2.error}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ERREUR: ${error.message}`);
    }

    // Test 3: Recherche d'employ√©s
    console.log('\nüìä Test 3: Recherche d\'employ√©s');
    try {
      const response3 = await fetch(`http://localhost:3000/api/employees?search=test`);
      const result3 = await response3.json();
      
      console.log(`   - Status: ${response3.status}`);
      console.log(`   - Success: ${result3.success}`);
      console.log(`   - Count: ${result3.count}`);
      
      if (result3.success) {
        console.log(`   ‚úÖ SUCC√àS: ${result3.count} employ√©s trouv√©s pour "test"`);
      } else {
        console.log(`   ‚ùå √âCHEC: ${result3.error}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ERREUR: ${error.message}`);
    }

    // Test 4: Cr√©ation d'un employ√©
    console.log('\nüìä Test 4: Cr√©ation d\'un employ√©');
    
    // Donn√©es de test pour l'employ√©
    const testEmployeeData = {
      prenom: 'Test',
      nom: 'API Employee',
      email: `test.api.employee.${Date.now()}@example.com`,
      telephone: '+224123456789',
      poste: 'D√©veloppeur API Test',
      partner_id: partner.id,
      actif: true,
      genre: 'Homme', // Champ obligatoire
      role: 'D√©veloppeur',
      type_contrat: 'CDI',
      salaire_net: 500000,
      date_embauche: new Date().toISOString().split('T')[0]
    };

    console.log(`   - Donn√©es: ${testEmployeeData.prenom} ${testEmployeeData.nom} (${testEmployeeData.email})`);

    try {
      const response4 = await fetch('http://localhost:3000/api/employees', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testEmployeeData)
      });

      const result4 = await response4.json();
      
      console.log(`   - Status: ${response4.status}`);
      console.log(`   - Success: ${result4.success}`);
      
      if (result4.success) {
        console.log(`   ‚úÖ SUCC√àS: Employ√© cr√©√©`);
        console.log(`   - Employee ID: ${result4.employee?.id}`);
        console.log(`   - User ID: ${result4.employee?.user_id || 'NULL'}`);
        console.log(`   - Account Results: ${result4.accountResults?.employe?.success ? '‚úÖ' : '‚ùå'}`);
        
        if (result4.employee?.user_id) {
          console.log(`   ‚úÖ SUCC√àS: user_id d√©fini: ${result4.employee.user_id}`);
        } else {
          console.log(`   ‚ùå √âCHEC: user_id manquant!`);
        }
        
        // V√©rifier dans la base de donn√©es
        console.log(`\nüîç V√©rification dans la base de donn√©es...`);
        
        const { data: dbEmployee, error: dbError } = await supabase
          .from('employees')
          .select('*')
          .eq('id', result4.employee.id)
          .single();

        if (dbError) {
          console.log(`   ‚ùå Erreur DB: ${dbError.message}`);
        } else {
          console.log(`   ‚úÖ Employ√© dans DB:`);
          console.log(`   - ID: ${dbEmployee.id}`);
          console.log(`   - Nom: ${dbEmployee.prenom} ${dbEmployee.nom}`);
          console.log(`   - Email: ${dbEmployee.email}`);
          console.log(`   - User ID: ${dbEmployee.user_id || 'NULL'}`);
          
          if (dbEmployee.user_id) {
            console.log(`   ‚úÖ SUCC√àS: user_id pr√©sent dans DB: ${dbEmployee.user_id}`);
          } else {
            console.log(`   ‚ùå √âCHEC: user_id manquant dans DB!`);
          }
        }
        
      } else {
        console.log(`   ‚ùå √âCHEC: ${result4.error}`);
        if (result4.details) {
          console.log(`   - D√©tails:`, result4.details);
        }
      }
    } catch (error) {
      console.log(`   ‚ùå ERREUR: ${error.message}`);
    }

    console.log(`\nüéâ Tests termin√©s!`);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter les tests
testEmployeeAPI(); 