const fetch = require('node-fetch');

// URL de base pour les tests
const BASE_URL = 'http://localhost:3000';

async function testEmployeeCreationFix() {
  console.log('üîß Test de la correction de la cr√©ation d\'employ√©\n');
  
  // Donn√©es de test pour un nouvel employ√©
  const testEmployee = {
    nom: 'Test',
    prenom: 'Employee',
    email: `test.employee.${Date.now()}@test.com`, // Email unique
    telephone: '+224625212115',
    poste: 'D√©veloppeur',
    departement: 'IT',
    date_embauche: new Date().toISOString().split('T')[0],
    salaire: 500000,
    statut: 'actif',
    partner_id: 'test-partner-id', // Remplacer par un vrai ID de partenaire
    type_contrat: 'CDI',
    adresse: 'Conakry, Guin√©e'
  };

  console.log('üìã Donn√©es de test employ√©:', testEmployee);

  // Test 1: V√©rifier l'API de cr√©ation de compte employ√©
  console.log('\n1. Test de l\'API de cr√©ation de compte employ√©...');
  try {
    const accountResponse = await fetch(`${BASE_URL}/api/auth/create-employee-account`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        employeeData: {
          ...testEmployee,
          id: 'test-employee-id'
        }
      }),
    });

    console.log(`üìä Status: ${accountResponse.status} ${accountResponse.statusText}`);

    if (accountResponse.ok) {
      const result = await accountResponse.json();
      console.log('‚úÖ Compte employ√© cr√©√© avec succ√®s:', result);
    } else {
      const errorData = await accountResponse.json();
      console.log('‚ùå Erreur cr√©ation compte:', errorData);
    }
  } catch (error) {
    console.error('üí• Erreur r√©seau:', error.message);
  }

  // Test 2: Test avec un email d√©j√† existant
  console.log('\n2. Test avec un email d√©j√† existant...');
  try {
    const duplicateResponse = await fetch(`${BASE_URL}/api/auth/create-employee-account`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        employeeData: {
          ...testEmployee,
          email: 'test@test.com', // Email qui pourrait exister
          id: 'test-employee-id-2'
        }
      }),
    });

    console.log(`üìä Status: ${duplicateResponse.status} ${duplicateResponse.statusText}`);

    if (duplicateResponse.status === 409) {
      const result = await duplicateResponse.json();
      console.log('‚úÖ Gestion correcte de l\'email en double:', result);
    } else {
      const result = await duplicateResponse.json();
      console.log('‚ö†Ô∏è R√©ponse inattendue:', result);
    }
  } catch (error) {
    console.error('üí• Erreur r√©seau:', error.message);
  }

  // Test 3: Test avec des donn√©es invalides
  console.log('\n3. Test avec des donn√©es invalides...');
  try {
    const invalidResponse = await fetch(`${BASE_URL}/api/auth/create-employee-account`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        employeeData: {
          email: 'email-invalide',
          id: 'test-employee-id-3'
        }
      }),
    });

    console.log(`üìä Status: ${invalidResponse.status} ${invalidResponse.statusText}`);

    if (invalidResponse.status === 400) {
      const result = await invalidResponse.json();
      console.log('‚úÖ Validation correcte des donn√©es:', result);
    } else {
      const result = await invalidResponse.json();
      console.log('‚ö†Ô∏è R√©ponse inattendue:', result);
    }
  } catch (error) {
    console.error('üí• Erreur r√©seau:', error.message);
  }

  console.log('\nüéâ Tests termin√©s !');
  console.log('\nüìù R√©sum√© des corrections apport√©es:');
  console.log('   - Variable accountResult correctement d√©clar√©e');
  console.log('   - V√©rification des emails en double dans l\'API');
  console.log('   - Am√©lioration de la gestion d\'erreur');
  console.log('   - Utilisation du service SMS corrig√©');
}

// Ex√©cuter les tests
testEmployeeCreationFix(); 