const fetch = require('node-fetch');
const { v4: uuidv4 } = require('uuid');

// Configuration
const API_BASE_URL = 'http://localhost:3000';
const PARTNER_ID = 'a3c3916b-1a7b-4b41-a1af-2c4a793ab4f8'; // ID de partenaire existant

// Services pour les tests
const smsService = {
  async sendSMS(to, message) {
    try {
      const response = await fetch(`${API_BASE_URL}/api/sms/send`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ to, message })
      });
      return await response.json();
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
};

const emailService = {
  async sendEmail(to, subject, html) {
    try {
      const response = await fetch(`${API_BASE_URL}/api/email/send`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ to, subject, html })
      });
      return await response.json();
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
};

async function testEmployeeCreationWithSMS() {
  console.log('üß™ Test de cr√©ation d\'employ√© avec envoi SMS/Email automatique');
  console.log('=' .repeat(60));

  try {
    // Donn√©es de test pour un nouvel employ√©
    const testEmployeeData = {
      partner_id: PARTNER_ID,
      nom: 'Diallo',
      prenom: 'Fatou',
      genre: 'Femme',
      email: `fatou.diallo.${Date.now()}@test.com`,
      telephone: '+224625212115',
      adresse: '123 Rue Test, Conakry',
      poste: 'D√©veloppeuse',
      role: 'D√©veloppeuse Full-Stack',
      type_contrat: 'CDI',
      salaire_net: 3500000,
      date_embauche: '2024-01-15',
      actif: true
    };

    console.log('üìù Donn√©es de l\'employ√© de test:');
    console.log('  - Nom:', `${testEmployeeData.prenom} ${testEmployeeData.nom}`);
    console.log('  - Email:', testEmployeeData.email);
    console.log('  - T√©l√©phone:', testEmployeeData.telephone);
    console.log('  - Poste:', testEmployeeData.poste);

    // Cr√©er l'employ√© via l'API
    console.log('\nüîÑ Cr√©ation de l\'employ√©...');
    
    const createResponse = await fetch(`${API_BASE_URL}/api/employees`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testEmployeeData)
    });

    if (!createResponse.ok) {
      const errorData = await createResponse.json();
      console.error('‚ùå Erreur cr√©ation employ√©:', errorData);
      return;
    }

    const createResult = await createResponse.json();
    
    console.log('‚úÖ Employ√© cr√©√© avec succ√®s:', createResult.employe.id);
    console.log('üìä R√©sultats de cr√©ation:');
    console.log('  - Compte employ√©:', createResult.accountResults.employe.success ? '‚úÖ' : '‚ùå');
    console.log('  - SMS employ√©:', createResult.smsResults.employe.success ? '‚úÖ' : '‚ùå');
    console.log('  - Email employ√©:', createResult.emailResults.employe.success ? '‚úÖ' : '‚ùå');
    console.log('  - SMS admin:', createResult.smsResults.admin.success ? '‚úÖ' : '‚ùå');

    // Afficher les d√©tails des r√©sultats
    if (createResult.accountResults.employe.success) {
      console.log('\nüîê D√©tails du compte cr√©√©:');
      console.log('  - Mot de passe:', createResult.accountResults.employe.password);
    }

    if (!createResult.smsResults.employe.success) {
      console.log('\n‚ùå Erreur SMS employ√©:', createResult.smsResults.employe.error);
    }

    if (!createResult.emailResults.employe.success) {
      console.log('\n‚ùå Erreur email employ√©:', createResult.emailResults.employe.error);
    }

    // Test manuel d'envoi SMS si l'envoi automatique a √©chou√©
    if (!createResult.smsResults.employe.success && createResult.accountResults.employe.success) {
      console.log('\nüîÑ Test manuel d\'envoi SMS...');
      
      const smsMessage = `Bonjour ${testEmployeeData.prenom} ${testEmployeeData.nom}, votre compte ZaLaMa a √©t√© cr√©√© avec succ√®s.\nEmail: ${testEmployeeData.email}\nMot de passe: ${createResult.accountResults.employe.password}\nConnectez-vous sur https://admin.zalama.com`;
      
      const smsResult = await smsService.sendSMS([testEmployeeData.telephone], smsMessage);
      console.log('üì± R√©sultat SMS manuel:', smsResult.success ? '‚úÖ' : '‚ùå');
      if (!smsResult.success) {
        console.log('  Erreur:', smsResult.error);
      }
    }

    // Test manuel d'envoi email si l'envoi automatique a √©chou√©
    if (!createResult.emailResults.employe.success && createResult.accountResults.employe.success) {
      console.log('\nüîÑ Test manuel d\'envoi email...');
      
      const emailSubject = `Compte employ√© cr√©√© - ${testEmployeeData.prenom} ${testEmployeeData.nom}`;
      const emailBody = `
        <h2>Votre compte employ√© a √©t√© cr√©√©</h2>
        <p><strong>Employ√©:</strong> ${testEmployeeData.prenom} ${testEmployeeData.nom}</p>
        <p><strong>Email:</strong> ${testEmployeeData.email}</p>
        <p><strong>Mot de passe:</strong> ${createResult.accountResults.employe.password}</p>
        <p>Vous pouvez maintenant vous connecter √† l'interface d'administration.</p>
      `;
      
      const emailResult = await emailService.sendEmail(testEmployeeData.email, emailSubject, emailBody);
      console.log('üìß R√©sultat email manuel:', emailResult.success ? '‚úÖ' : '‚ùå');
      if (!emailResult.success) {
        console.log('  Erreur:', emailResult.error);
      }
    }

    console.log('\n‚úÖ Test termin√© !');
    console.log('\nüìã R√©sum√©:');
    console.log('  - Employ√© cr√©√©:', '‚úÖ');
    console.log('  - Compte cr√©√©:', createResult.accountResults.employe.success ? '‚úÖ' : '‚ùå');
    console.log('  - SMS envoy√©s:', createResult.smsResults.employe.success || createResult.smsResults.admin.success ? '‚úÖ' : '‚ùå');
    console.log('  - Emails envoy√©s:', createResult.emailResults.employe.success ? '‚úÖ' : '‚ùå');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

async function testValidation() {
  console.log('\nüîç Test de validation des donn√©es\n');

  const testCases = [
    {
      name: 'Donn√©es valides compl√®tes',
      data: {
        partner_id: PARTNER_ID,
        nom: 'Traor√©',
        prenom: 'Moussa',
        genre: 'Homme',
        email: 'moussa.traore@test.com',
        telephone: '+224625212115',
        poste: 'Manager',
        type_contrat: 'CDI',
        salaire_net: 5000000
      }
    },
    {
      name: 'Donn√©es minimales (sans email/t√©l√©phone)',
      data: {
        partner_id: PARTNER_ID,
        nom: 'Camara',
        prenom: 'Aissatou',
        poste: 'Assistante'
      }
    },
    {
      name: 'Donn√©es invalides',
      data: {
        partner_id: PARTNER_ID,
        nom: '', // Nom vide
        prenom: 'Test',
        email: 'email-invalide', // Email invalide
        telephone: '123', // T√©l√©phone invalide
        poste: 'Testeur'
      }
    }
  ];

  for (const testCase of testCases) {
    console.log(`üìù Test: ${testCase.name}`);
    
    try {
      const response = await fetch(`${API_BASE_URL}/api/employees`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testCase.data)
      });

      const result = await response.json();
      
      if (response.ok && result.success) {
        console.log('  ‚úÖ Succ√®s');
        console.log('    - Employ√© cr√©√©:', result.employe.id);
        console.log('    - Compte cr√©√©:', result.accountResults.employe.success ? 'Oui' : 'Non');
      } else {
        console.log(`  ‚ùå √âchec: ${result.error}`);
        if (result.details) {
          console.log('    - Erreurs:', result.details);
        }
        if (result.warnings) {
          console.log('    - Avertissements:', result.warnings);
        }
      }
    } catch (error) {
      console.log(`  üí• Erreur: ${error.message}`);
    }
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ Test d\'int√©gration SMS/Email pour la cr√©ation d\'employ√©s\n');
  
  // V√©rifier que le serveur est d√©marr√©
  try {
    const healthResponse = await fetch(`${API_BASE_URL}/api/health`);
    if (!healthResponse.ok) {
      console.log('‚ùå Serveur non accessible. Assurez-vous que le serveur Next.js est d√©marr√© sur le port 3000');
      console.log('   Commande: npm run dev');
      return;
    }
    console.log('‚úÖ Serveur accessible\n');
  } catch (error) {
    console.log('‚ùå Impossible de se connecter au serveur');
    console.log('   Assurez-vous que le serveur Next.js est d√©marr√© sur le port 3000');
    console.log('   Commande: npm run dev');
    return;
  }

  // Ex√©cuter les tests
  await testEmployeeCreationWithSMS();
  await testValidation();
  
  console.log('\nüèÅ Tous les tests termin√©s');
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testEmployeeCreationWithSMS,
  testValidation
}; 